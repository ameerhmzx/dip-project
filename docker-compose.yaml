version: "3.5"

networks:
  backend:
  frontend:

volumes:
  postgresql_data:
  elastic_data:

services:
  database:
    container_name: $POSTGRES_HOSTNAME
    hostname: $POSTGRES_HOSTNAME
    image: postgres:$POSTGRES_VERSION
    environment:
      - POSTGRES_USER=$POSTGRES_USERNAME
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB_NAME
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "54322:5432"

  cache:
    container_name: $REDIS_HOST
    hostname: $REDIS_HOST
    image: redis
    networks:
      - backend
    ports:
      - "63791:6379"

  server:
    container_name: photos_server
    hostname: photos_primary
    build:
      context: ./
      dockerfile: Dockerfile
    image: photos
    command: sh -c "
      python -m pip install -r requirements.txt &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000
      "
    env_file: .env
    networks:
      - backend
      - frontend
    depends_on:
      - database
#      - elastic
      - cache
    ports:
      - "8000:8000"
    expose:
      - 8000
    volumes:
      - .:/photos

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    container_name: $ELASTIC_HOSTNAME
    hostname: $ELASTIC_HOSTNAME
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - backend
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - xpack.security.enabled=$ELASTIC_SECURITY
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  worker_1:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: photos_worker_1
    command: celery -A photos worker --loglevel=info
    env_file: .env
    volumes:
      - .:/photos
    networks:
      - backend
    depends_on:
      - cache
      - server
#
#  monitor:
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    container_name: photos_worker_monitor
#    command: flower -A photos --port=5555
#    env_file: .env
#    volumes:
#      - .:/photos
#    ports:
#      - "5555:5555"
#    networks:
#      - backend
#    depends_on:
#      - cache
#      - server
